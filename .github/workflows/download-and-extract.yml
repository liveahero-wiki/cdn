name: Download-and-extract

on:
  #schedule:
  #  - cron: '0 * * * *'
  workflow_dispatch: ~

jobs:
  build:
    name: Build
    env:
      USER_NAME: lah-wiki-bot
      USER_EMAIL: noreply@github.com
      BUNDLES_DIR: bundles
      ARTIFACTS_DIR: artifacts
      FINISH_INDICATOR: done
      ARTIFACTS_BRANCH: artifacts
    runs-on: windows-2019
    strategy:
      matrix:
        node-version: [12.x]
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Installation
        run: |
          npx yarn install

      - name: Download official bundles
        id: bundles
        run: |
          New-Item -Path . -Name ${env:BUNDLES_DIR} -ItemType directory
          npm run download:official-bundles
          $Env:BUNDLE_COUNT = (Get-ChildItem ${env:BUNDLES_DIR} | Measure-Object).Count
          Write-Output "BUNDLE_COUNT: ${env:BUNDLE_COUNT}"
          echo "BUNDLE_COUNT=${env:BUNDLE_COUNT}" >> ${env:GITHUB_ENV}

      - name: Extract bundles
        if: env.BUNDLE_COUNT != '0'
        run: |
          Expand-Archive -Path AssetStudio.zip -DestinationPath AssetStudio
          .\AssetStudio\Release\AssetStudioConsole.exe ${env:BUNDLES_DIR} ${env:ARTIFACTS_DIR} ${env:FINISH_INDICATOR}
          npm run watch:finish-indicator -- ${env:FINISH_INDICATOR}
          Remove-Item ${env:FINISH_INDICATOR}
          (dir -r ${env:ARTIFACTS_DIR}).FullName

      - name: Filter assets
        if: env.BUNDLE_COUNT != '0'
        run: |
          npm run remove:duplicated-assets -- ${env:ARTIFACTS_DIR}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        if: env.BUNDLE_COUNT != '0'
        with:
          python-version: ${{ matrix.python-version }}

      - name: Process JSON files
        if: env.BUNDLE_COUNT != '0'
        working-directory: ${{ env.ARTIFACTS_DIR }}
        run: |
          python ..\preprocess.py

      - uses: actions/checkout@v2
        if: env.BUNDLE_COUNT != '0'
        with:
          ref: ${{ env.ARTIFACTS_BRANCH }}
          path: GH
          clean: false

      - name: Commit images
        if: env.BUNDLE_COUNT != '0'
        working-directory: GH
        run: |
          Copy-Item -Force -Recurse -Path ..\${env:ARTIFACTS_DIR}\* -Destination .
          git config --global user.name ${env:USER_NAME}
          git config --global user.email ${env:USER_EMAIL}

          git add MonoBehaviour\fg_*.json
          git add Texture2D\fg_*.png
          git add Sprite\icon_*.png
          git add Sprite\item_*.png
          git add Sprite\b_skill*.png
          git add Sprite\status_*.png
          #git add Sprite\banner_*.png

          git commit -m "Auto-extract assets to artifacts"
          git push origin HEAD

      - uses: actions/checkout@v2
        if: env.BUNDLE_COUNT != '0'
        with:
          repository: ${{ secrets.BOOK_REPO }}
          token: ${{ secrets.BOOK_SECRET }}
          path: BOOK
          clean: false

      - name: Commit books
        if: env.BUNDLE_COUNT != '0'
        working-directory: BOOK
        run: |
          Copy-Item -Force -Recurse -Path ..\${env:ARTIFACTS_DIR}\MonoBehaviour\* -Destination .
          git config --global user.name ${env:USER_NAME}
          git config --global user.email ${env:USER_EMAIL}

          git add *.book.json
          git add *.chapter.json

          git commit -m "Auto-extract assets to artifacts"
          git push origin HEAD

      #- name: Commit asset list info
      #  if: env.BUNDLE_COUNT != '0'
      #  run: |
      #    $cmdOutput = (git status --porcelain --untracked-files=no) | Out-String
      #    if ($cmdOutput.length -gt 8) {
      #      Write-Output "Asset list is updated."
      #      git config --global user.name ${env:USER_NAME}
      #      git config --global user.email ${env:USER_EMAIL}
      #      git add version
      #      git commit -m "Auto-update asset list"
      #      git push origin HEAD
      #      Write-Output "ðŸ¤˜ update version complete."
      #    } else {
      #      Write-Output "Assets are already up to date."
      #    }
